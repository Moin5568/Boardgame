pipeline {
    agent any
    tools {
        jdk 'jdk17'
        maven 'maven3'
    }
    environment{
        SCANNER_HOME= tool 'sonar-scanner'
    }

    stages {
        stage('git checkout') {
            steps {
                git 'https://github.com/Moin5568/Boardgame.git'
            }
        }
        stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }
        stage('Test') {
            steps {
                sh "mvn test"
            }
        }
        stage('File System Scan') {
            steps {
                sh "trivy fs --format table -o trivy-fs-report.html ."
            }
        }
        stage('Sonarqube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
        sh  '''
               $SCANNER_HOME/bin/sonar-scanner \
              -Dsonar.projectKey=Boardgame \
              -Dsonar.projectName=Boardgame \
              -Dsonar.java.binaries=.
              '''
               }

            }
        }
        stage('Quality Gate') {
            steps {
                script{
                   waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }
        stage('Build') {
            steps {
                sh "mvn package"
            }
        }
        stage('publish to Nexus') {
            steps {
              withMaven(globalMavenSettingsConfig: 'global-settings', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                sh "mvn deploy"
                 }
            }
        }
        stage('Build & Tag Docker image') {
            steps {
               script {
                   withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                    sh "docker build -t moin2410/boardshack:latest ."
                    }
               }
            }
        }
        stage('Docker image Scan') {
            steps {
                sh "trivy image --format table -o trivy-fs-report.html moin2410/boardshack:latest"
            }
        }
        stage('Push Docker image') {
            steps {
               script {
                   withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                    sh "docker push moin2410/boardshack:latest"
                    }
               }
            }
        }
        stage('Deploy to EKS') {
    steps {
        script {
            sh 'kubectl apply -f deployment.yaml'
            sh 'kubectl apply -f service.yaml'
        }
    }
}


        stage('Verify Deployment') {
            steps {
                sh 'kubectl get pods'
                sh 'kubectl get svc'
            }
        }
    }
}
